package com.iai.mdf.Handlers;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.ShapeDrawable;
import android.graphics.drawable.shapes.RectShape;
import android.util.Log;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.iai.mdf.DependenceClasses.CustomGraphics;
import com.iai.mdf.R;

import java.util.ArrayList;
import java.util.Random;

/**
 * Created by Mou on 9/15/2017.
 */

public class DrawHandler {


    public static final int POINT_TYPE_LEFT = 0;
    public static final int POINT_TYPE_RIGHT = 1;
    private final String LOG_TAG = "DrawHandler";
    private final int ROW_COL_POINT_NUM = 4;
    private Context ctxt;
    private int SCREEN_WIDTH;
    private int SCREEN_HEIGHT;
    private ArrayList<Point> dotCandidates;
    private FrameLayout dotHolderLayout;
    private TextView dotTextView;
    private Point   currDot;
    private int     currDotType;




    public DrawHandler(Context context, int[] screenSize){
        ctxt = context;
        SCREEN_WIDTH = screenSize[0];
        SCREEN_HEIGHT = screenSize[1];
        dotCandidates = new ArrayList<>();
        initDotCandidates();
        dotHolderLayout = null;
        currDot = new Point();
        currDot.set(-1, -1);
        currDotType = -1;
    }

    public void showNextPoint(){
        generateDot();
        showDot();
    }

    public void setDotHolderLayout(FrameLayout frameLayout){
        dotHolderLayout = frameLayout;
    }

    public Point getCurrDot(){
        return currDot;
    }

    public int getCurrDotType(){
        return currDotType;
    }



    /**
     * init point candidates with each stored in a Point variable.
     * Then each point will be added into an ArrayList
     */
    private void initDotCandidates(){
        if( null!= dotCandidates) {
            int width_interval = (SCREEN_WIDTH / 100) * 100 / (ROW_COL_POINT_NUM + 1);
            int height_interval = (SCREEN_HEIGHT / 100) * 100 / (ROW_COL_POINT_NUM + 1);
            for (int i = 1; i <= ROW_COL_POINT_NUM; ++i) {
                for (int j = 1; j <= ROW_COL_POINT_NUM; ++j) {
                    dotCandidates.add(new Point(i * width_interval, j * height_interval));
                }
            }
        }
    }


    /**
     * randomly generate a dot, not the same as the previous one
     */
    private void generateDot(){
        int randIndex;
        do{
            randIndex = new Random().nextInt( dotCandidates.size() );
        } while( dotCandidates.get(randIndex).equals(currDot.x, currDot.y) );
        currDot = dotCandidates.get(randIndex);
        currDotType = new Random().nextInt(2);
    }


    /**
     * show the dot that is generated by this controller
     */
    private void showDot(){
        dotHolderLayout.removeAllViews();
        dotTextView = new TextView(ctxt);
        dotTextView.setBackgroundResource(R.drawable.dot_r20);
        dotTextView.setText( currDotType ==POINT_TYPE_LEFT ? "L":"R" );
        dotTextView.setTextAlignment( TextView.TEXT_ALIGNMENT_CENTER );
        //setting image position
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params.leftMargin = currDot.x;
        params.topMargin = currDot.y;
        dotTextView.setLayoutParams(params);
        //adding view to layout
        dotHolderLayout.addView(dotTextView);
    }


    /**
     *  show a dot with given position
     * @param x   x value of the point
     * @param y   y value of the point
     */
    public void showDot(int x, int y){
        if( null==dotHolderLayout ){
            String warning = "No layout is assigned for displaying dots";
            Log.d(LOG_TAG, warning);
            Toast.makeText(ctxt, warning, Toast.LENGTH_SHORT );
            return;
        }
        dotHolderLayout.removeAllViews();
        dotTextView = new TextView(ctxt);
        dotTextView.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params.leftMargin = x;
        params.topMargin = y;
        dotTextView.setLayoutParams(params);
        //adding view to layout
        dotHolderLayout.addView(dotTextView);
        //set the current point
        currDot.set(x,y);
    }


    /**
     *  show a dot computed from the given ratio
     * @param width_ratio   the relative location regarding to the screen width
     * @param height_ratio  the relative location regarding to the screen height
     */
    public void showDot(float width_ratio, float height_ratio){
        if( null==dotHolderLayout ){
            String warning = "No layout is assigned for displaying dots";
            Log.d(LOG_TAG, warning);
            Toast.makeText(ctxt, warning, Toast.LENGTH_SHORT );
            return;
        }
        dotHolderLayout.removeAllViews();
        dotTextView = new TextView(ctxt);
        dotTextView.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params.leftMargin = Math.round( width_ratio * SCREEN_WIDTH );
        params.topMargin = Math.round( height_ratio * SCREEN_HEIGHT );
        dotTextView.setLayoutParams(params);
        //adding view to layout
        dotHolderLayout.addView(dotTextView);
        //set the current point
        currDot.set(params.leftMargin, params.topMargin);
    }

    public void showDot(int x, int y, FrameLayout dotHolder){
        if( null==dotHolder ){
            String warning = "No layout is assigned for displaying dots";
            Log.d(LOG_TAG, warning);
            Toast.makeText(ctxt, warning, Toast.LENGTH_SHORT );
            return;
        }
        dotHolder.removeAllViews();
        TextView resDotTextView = new TextView(ctxt);
        resDotTextView.setBackgroundResource(R.drawable.dot_green25);
        //setting image position
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params.leftMargin = x;
        params.topMargin = y;
        resDotTextView.setLayoutParams(params);
        //adding view to layout
        dotHolder.addView(resDotTextView);
    }

    public void showDots(double[] points, FrameLayout dotHolderLayout){
        int size = points.length / 2;
        dotHolderLayout.removeAllViews();
        for( int i=0; i<size; i++){
            TextView dotTextView = new TextView(ctxt);
            dotTextView.setBackgroundResource(R.drawable.dot_r2);
            //setting image position
            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                    FrameLayout.LayoutParams.WRAP_CONTENT);
            params.leftMargin = Math.round( (int)points[2*i] );
            params.topMargin = Math.round( (int)points[2*i+1] );
            dotTextView.setLayoutParams(params);
            //adding view to layout
            dotHolderLayout.addView(dotTextView);
        }
    }

    public void show4CornerDots(){
        if( null==dotHolderLayout ){
            String warning = "No layout is assigned for displaying dots";
            Log.d(LOG_TAG, warning);
            Toast.makeText(ctxt, warning, Toast.LENGTH_SHORT );
            return;
        }
        dotHolderLayout.removeAllViews();
        TextView dot1 = new TextView(ctxt);
        dot1.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params1 = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params1.leftMargin = 140;
        params1.topMargin = 220;
        dot1.setLayoutParams(params1);
        //adding view to layout
        dotHolderLayout.addView(dot1);
        //
        TextView dot2 = new TextView(ctxt);
        dot2.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params2 = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params2.leftMargin = 560;
        params2.topMargin = 220;
        dot2.setLayoutParams(params2);
        //adding view to layout
        dotHolderLayout.addView(dot2);
        //
        TextView dot3 = new TextView(ctxt);
        dot3.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params3 = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params3.leftMargin = 140;
        params3.topMargin = 880;
        dot3.setLayoutParams(params3);
        //adding view to layout
        dotHolderLayout.addView(dot3);
        //
        TextView dot4 = new TextView(ctxt);
        dot4.setBackgroundResource(R.drawable.dot_r20);
        //setting image position
        FrameLayout.LayoutParams params4 = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                FrameLayout.LayoutParams.WRAP_CONTENT);
        params4.leftMargin = 560;
        params4.topMargin = 880;
        dot4.setLayoutParams(params4);
        //adding view to layout
        dotHolderLayout.addView(dot4);
    }

    public void showAllCandidateDots(){
        if( null==dotHolderLayout ){
            String warning = "No layout is assigned for displaying dots";
            Log.d(LOG_TAG, warning);
            Toast.makeText(ctxt, warning, Toast.LENGTH_SHORT );
            return;
        }
        dotHolderLayout.removeAllViews();
        for(int i=0; i<dotCandidates.size(); ++i) {
            TextView dot = new TextView(ctxt);
            dot.setBackgroundResource(R.drawable.dot_r20);
            //setting image position
            FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                    FrameLayout.LayoutParams.WRAP_CONTENT);
            params.leftMargin = dotCandidates.get(i).x;
            params.topMargin = dotCandidates.get(i).y;
            dot.setLayoutParams(params);
            //adding view to layout
            dotHolderLayout.addView(dot);
        }
    }


    /**
     *  show a rectangle given corner points
     */
    public void showRect(int x1, int y1, int width, int height, FrameLayout graphicsHolder){
        CustomGraphics graphics = new CustomGraphics(ctxt, CustomGraphics.TYPE_RECTANGLE);
        ShapeDrawable sd = new ShapeDrawable(new RectShape());
        sd.getPaint().setColor(Color.GREEN);
        sd.getPaint().setStyle(Paint.Style.STROKE);
        sd.getPaint().setStrokeWidth(1);
        View view = new View(ctxt);
        view.setBackground(sd);

        graphicsHolder.removeAllViews();
        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(width, height);
        params.leftMargin = x1;
        params.topMargin = y1;
        graphicsHolder.addView(view, params);
    }








}
